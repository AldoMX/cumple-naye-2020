{"version":3,"sources":["App/Player/index.js","App/index.js","serviceWorker.js","index.js"],"names":["sources","aldo","type","src","size","angie","ulises","playerOptions","controls","i18n","restart","rewind","play","pause","fastForward","seek","seekLabel","played","buffered","currentTime","duration","volume","mute","unmute","enableCaptions","disableCaptions","download","enterFullscreen","exitFullscreen","frameTitle","captions","settings","menuBack","speed","normal","quality","loop","Player","handleClose","videoId","useState","className","setClassName","useEffect","source","player","Plyr","autoplay","destroy","onClick","regalos","array","counter","length","index","Math","floor","random","temp","shuffle","App","setVideoId","handleClick","alt","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAKMA,G,YAAU,CACdC,KAAM,CACJC,KAAM,QACNF,QAAS,CACP,CACEG,IAAK,mKACLD,KAAM,YACNE,KAAM,OAIZC,MAAO,CACLH,KAAM,QACNF,QAAS,CACP,CACEG,IAAK,kKACLD,KAAM,YACNE,KAAM,OAIZE,OAAQ,CACNJ,KAAM,QACNF,QAAS,CACP,CACEG,IAAK,kKACLD,KAAM,YACNE,KAAM,SAMRG,EAAgB,CACpBC,SAAU,CACR,OACA,WACA,eACA,YAEFC,KAAM,CACJC,QAAS,YACTC,OAAQ,sBACRC,KAAM,aACNC,MAAO,SACPC,YAAa,wBACbC,KAAM,SACNC,UAAW,8BACXC,OAAQ,cACRC,SAAU,aACVC,YAAa,gBACbC,SAAU,cACVC,OAAQ,UACRC,KAAM,SACNC,OAAQ,YACRC,eAAgB,0BAChBC,gBAAiB,6BACjBC,SAAU,YACVC,gBAAiB,oBACjBC,eAAgB,6BAChBC,WAAY,2BACZC,SAAU,gBACVC,SAAU,mBACVC,SAAU,+BACVC,MAAO,YACPC,OAAQ,SACRC,QAAS,UACTC,KAAM,YAIGC,EAAS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EAChBC,mBAAS,gBADO,mBAC3CC,EAD2C,KAChCC,EADgC,KAoBlD,OAlBAC,qBAAU,WACR,IAAMC,EAAS5C,EAAQuC,GACjBM,EAASD,EAAS,IAAIE,IAAK,wBAAyBvC,GAAiB,KAQ3E,OAPIsC,GACFA,EAAOD,OAASA,EAChBC,EAAOE,UAAW,EAClBL,EAAa,2BAEbA,EAAa,gBAER,WACLA,EAAa,gBACTG,GACFA,EAAOG,aAGV,CAACT,IAGF,yBAAKE,UAAWA,GACd,yBAAKA,UAAU,eAAeQ,QAASX,IACvC,kC,MC3EN,IAAMY,EApBN,SAAiBC,GAIf,IAHA,IAAIC,EAAUD,EAAME,OAGbD,EAAU,GAAG,CAEhB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAMnCM,EAAOP,IAHXC,GAIAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASI,EAGnB,OAAOP,EAGOQ,CAAQ,CAAC,OAAQ,QAAS,WA2B3BC,MAzBf,WAAgB,IAAD,EACiBpB,mBAAS,IAD1B,mBACND,EADM,KACGsB,EADH,KAEPC,EAAc,SAACvB,GAAD,OAAa,kBAAMsB,EAAWtB,KAClD,OACE,oCACA,yBAAKE,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKsB,IAAI,kCAA4B5D,IAAI,mCAE3C,yBAAKsC,UAAU,YACb,yBAAKsB,IAAI,kBAAkB5D,IAAI,sCAEjC,yBAAKsC,UAAU,YACZS,EAAQc,KAAI,SAACzB,EAAS0B,GACrB,IAAMF,EAAG,kBAAcE,EAAI,GACrB9D,EAAG,qCAAiC8D,EAAI,EAArC,QACT,OAAO,yBAAKC,IAAK3B,EAASU,QAASa,EAAYvB,IAAU,yBAAKwB,IAAKA,EAAK5D,IAAKA,UAInF,kBAAC,EAAD,CAAQmC,YAAawB,EAAY,IAAKvB,QAASA,MClC/B4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59711f6e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Plyr from 'plyr';\nimport 'plyr/dist/plyr.css';\nimport './styles.css';\n\nconst sources = {\n  aldo: {\n    type: 'video',\n    sources: [\n      {\n        src: 'https://rawcdn.githack.com/AldoMX/cumple-naye-2020/6dfe8cc6a2be48f29be7b974406a2c378e05965a/public/videos/WhatsApp%20Video%202020-03-27%20at%2011.55.50%20PM.mp4',\n        type: 'video/mp4',\n        size: 720,\n      },\n    ],\n  },\n  angie: {\n    type: 'video',\n    sources: [\n      {\n        src: 'https://rawcdn.githack.com/AldoMX/cumple-naye-2020/6dfe8cc6a2be48f29be7b974406a2c378e05965a/public/videos/WhatsApp%20Video%202020-03-27%20at%208.41.14%20PM.mp4',\n        type: 'video/mp4',\n        size: 480,\n      },\n    ],\n  },\n  ulises: {\n    type: 'video',\n    sources: [\n      {\n        src: 'https://rawcdn.githack.com/AldoMX/cumple-naye-2020/6dfe8cc6a2be48f29be7b974406a2c378e05965a/public/videos/WhatsApp%20Video%202020-03-27%20at%209.37.19%20PM.mp4',\n        type: 'video/mp4',\n        size: 352,\n      },\n    ],\n  },\n};\n\nconst playerOptions = {\n  controls: [\n    'play',\n    'progress',\n    'current-time',\n    'duration',\n  ],\n  i18n: {\n    restart: 'Reiniciar',\n    rewind: 'Atrasar {seektime}s',\n    play: 'Reproducir',\n    pause: 'Pausar',\n    fastForward: 'Adelantar {seektime}s',\n    seek: 'Buscar',\n    seekLabel: '{currentTime} de {duration}',\n    played: 'Reproducido',\n    buffered: 'Buffereado',\n    currentTime: 'Tiempo actual',\n    duration: 'Duración',\n    volume: 'Volumen',\n    mute: 'Mutear',\n    unmute: 'Desmutear',\n    enableCaptions: 'Habilitar subtítulos',\n    disableCaptions: 'Deshabilitar subtítulos',\n    download: 'Descargar',\n    enterFullscreen: 'Pantalla completa',\n    exitFullscreen: 'Salir de pantalla completa',\n    frameTitle: 'Reproductor para {title}',\n    captions: 'Subtítulos',\n    settings: 'Configuración',\n    menuBack: 'Regresar al menú anterior',\n    speed: 'Velocidad',\n    normal: 'Normal',\n    quality: 'Calidad',\n    loop: 'Repetir',\n  },\n}\n\nexport const Player = ({ handleClose, videoId }) => {\n  const [className, setClassName] = useState('video-player');\n  useEffect(() => {\n    const source = sources[videoId];\n    const player = source ? new Plyr('.video-player > video', playerOptions) : null;\n    if (player) {\n      player.source = source;\n      player.autoplay = true;\n      setClassName('video-player has-video');\n    } else {\n      setClassName('video-player');\n    }\n    return () => {\n      setClassName('video-player');\n      if (player) {\n        player.destroy();\n      }\n    };\n  }, [videoId]);\n\n  return (\n    <div className={className}>\n      <div className=\"close-button\" onClick={handleClose} />\n      <video />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Player } from './Player';\nimport './main.css';\n\nfunction shuffle(array) {\n  let counter = array.length;\n\n  // While there are elements in the array\n  while (counter > 0) {\n      // Pick a random index\n      let index = Math.floor(Math.random() * counter);\n\n      // Decrease counter by 1\n      counter--;\n\n      // And swap the last element with it\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n\n  return array;\n}\n\nconst regalos = shuffle(['aldo', 'angie', 'ulises']);\n\nfunction App() {\n  const [videoId, setVideoId] = useState('');\n  const handleClick = (videoId) => () => setVideoId(videoId);\n  return (\n    <>\n    <div className=\"App\">\n      <div className=\"title\">\n        <img alt=\"¡Feliz Cumpleaños Nayely!\" src=\"%PUBLIC_URL%/images/title.png\" />\n      </div>\n      <div className=\"subtitle\">\n        <img alt=\"Elige tu regalo\" src=\"%PUBLIC_URL%/images/subtitle.png\" />\n      </div>\n      <div className=\"presents\">\n        {regalos.map((videoId, i) => {\n          const alt = `Regalo #${i + 1}`;\n          const src = `%PUBLIC_URL%/images/present${i + 1}.png`;\n          return <div key={videoId} onClick={handleClick(videoId)}><img alt={alt} src={src} /></div>;\n        })}\n      </div>\n    </div>\n    <Player handleClose={handleClick('')} videoId={videoId} />\n    </>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}